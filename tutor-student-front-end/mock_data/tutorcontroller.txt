const Tutor = require('../models/Tutor');
const jwt = require('jsonwebtoken')
const bcrypt = require('bcryptjs')
const dotEnv = require('dotenv');
const { json } = require('body-parser');

dotEnv.config();

const secretKey = "onlinetutorsystem";
console.log(secretKey)


const tutorRegister = async (req, res) => {
    const { name, DOB, gender, userId, tutorPhoto, email, password, location,
        address, contactDetails, teachingSubjects } = req.body
    try {
        const tutorEmail = await Tutor.findOne({ email });
        if (tutorEmail) {
            return res.status(400).json("email already registered");
        }
        const hashedPassword = await bcrypt.hash(password, 10);

        const newTutor = new Tutor({
            name,
            DOB,
            gender,
            userId,
            tutorPhoto,
            email,
            //password: hashedPassword,
            password,
            location,
            address,
            contactDetails,
            teachingSubjects
        })
        await newTutor.save();
        res.status(201).json({
            message: "Tutor successfully registered..!"
        });
        console.log("Tutor successfully registered..!")
    } catch (error) {
        console.log(error)
        res.status(500).json({ error: "Internal server error" })
    }
}

const tutorLogin = async (req, res) => {
    const { email, password } = req.body;
    try {
        const tutor = await Tutor.findOne({ email });
        if (!tutor) {
            return res.status(401).json({ error: "Invalid userName" })
        }
        if (!(password === tutor.password)) {
            return res.status(401).json({ error: "Invalid password" })
        }
        const token = jwt.sign({ userId: tutor._id, type :"tutor" }, secretKey, { expiresIn: "1h" });
        res.status(200).json({ success: "Tutor logged in successfully", token });
        console.log(tutor.email)
    } catch (error) {
        console.log(error)
        res.status(500).json({ error: "Internal server error" })
    }
}

const getTutorById = async (req, res) => {
    const tutorID = req.params.id;
    try {
        const tutor = await Tutor.findById(tutorID);
        if (!tutor) {
            return res.status(404).json({ message : "no tutor exists with id" + tutorID})
        }
        return res.status(200).json({tutor})
    } catch {
        console.log(error)
        res.status(500).json({ error: "Internal server error" })
    }
}


const updateTutorById = async (req, res) => {
    const tutorID = req.params.id;
    console.log(tutorID)
    try {
        const updatedTutor = await Tutor.findByIdAndUpdate(tutorID, req.body, {new: true})
        return res.status(200).json({tutor:updatedTutor})
    } catch {
        console.log(error)
        res.status(500).json({ error: "Internal server error" })
    }
}
const addTutionSlot = async (req, res) => {
    const id = req.params.tutorId;
    console.log(id)
    try {
        const finalReq= {tutionSlots :[
            {
            subject: req.body.subject,
            tutionDate: req.body.tuitionDate, 
            timeFrom: req.body.tuitionTimeFrom,
            timeTo: req.body.tuitionTimeTo,
            fee: req.body.tuitionFee
            }
        ]
    }
        console.log(finalReq)
        const updatedTutor = await Tutor.findByIdAndUpdate({_id: id},{$push : finalReq})
        return res.status(200).json({message: "slots added successfully"})
    } catch (error) {
        console.log(error)
        res.status(500).json({ error: "Internal server error" })
    }
}

module.exports = { tutorRegister, tutorLogin, getTutorById, updateTutorById, addTutionSlot}